"""initial migration

Revision ID: 17617cc3dd13
Revises:
Create Date: 2023-11-28 23:19:53.001146

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from geoalchemy2 import Geography

# revision identifiers, used by Alembic.
revision: str = '17617cc3dd13'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'countries',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=56), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name'),
    )
    op.create_table(
        'images',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('content', sa.LargeBinary(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        'route_point_restrictions',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('begin_hour', sa.Time(), nullable=False),
        sa.Column('end_hour', sa.Time(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        'users',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('nickname', sa.String(), nullable=False),
        sa.Column(
            'created_at',
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text('now()'),
            nullable=False,
        ),
        sa.Column('email', sa.String(length=320), nullable=False),
        sa.Column('hashed_password', sa.String(length=1024), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('is_superuser', sa.Boolean(), nullable=False),
        sa.Column('is_verified', sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('nickname'),
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table(
        'cities',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('country', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=86), nullable=False),
        sa.ForeignKeyConstraint(
            ['country'],
            ['countries.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        'routes',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('creator', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('day_count', sa.Integer(), nullable=True),
        sa.Column('begin_hour', sa.Time(), nullable=True),
        sa.Column('end_hour', sa.Time(), nullable=True),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('photo', sa.Integer(), nullable=False),
        sa.Column('is_public', sa.Boolean(), nullable=True),
        sa.Column('is_calculated', sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ['creator'],
            ['users.id'],
        ),
        sa.ForeignKeyConstraint(
            ['photo'],
            ['images.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_geospatial_table(
        'route_points',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('route', sa.Integer(), nullable=False),
        sa.Column('city', sa.Integer(), nullable=False),
        sa.Column('restriction', sa.Integer(), nullable=True),
        sa.Column('name', sa.String(), nullable=True),
        sa.Column(
            'coordinates',
            Geography(
                geometry_type='POINT',
                srid=4326,
                spatial_index=False,
                from_text='ST_GeogFromText',
                name='geography',
            ),
            nullable=True,
        ),
        sa.Column('photo', sa.Integer(), nullable=False),
        sa.Column('mark', sa.Float(), nullable=True),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('position', sa.Integer(), nullable=False),
        sa.Column('day', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ['city'],
            ['cities.id'],
        ),
        sa.ForeignKeyConstraint(
            ['photo'],
            ['images.id'],
        ),
        sa.ForeignKeyConstraint(
            ['restriction'],
            ['route_point_restrictions.id'],
        ),
        sa.ForeignKeyConstraint(
            ['route'],
            ['routes.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_geospatial_index(
        'idx_route_points_coordinates',
        'route_points',
        ['coordinates'],
        unique=False,
        postgresql_using='gist',
        postgresql_ops={},
    )
    op.create_table(
        'user_favourites',
        sa.Column('user', sa.Integer(), nullable=False),
        sa.Column('route', sa.Integer(), nullable=False),
        sa.Column('favourite_date', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ['route'],
            ['routes.id'],
        ),
        sa.ForeignKeyConstraint(
            ['user'],
            ['users.id'],
        ),
        sa.PrimaryKeyConstraint('user', 'route'),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_favourites')
    op.drop_geospatial_index(
        'idx_route_points_coordinates',
        table_name='route_points',
        postgresql_using='gist',
        column_name='coordinates',
    )
    op.drop_geospatial_table('route_points')
    op.drop_table('routes')
    op.drop_table('cities')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('route_point_restrictions')
    op.drop_table('images')
    op.drop_table('countries')
    # ### end Alembic commands ###
